name: Deploy to Hugging Face Space

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Pre-deployment validation
  validate-deployment:
    name: üîç Validate Deployment Files
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate required files
      run: |
        echo "üîç Validating files for deployment..."
        
        # Required files for Space deployment
        required_files=(
          "app.py"
          "requirements.txt"
          "space_auth_test.py"
          "openllm_training_with_auth.py"
          "integrate_auth_into_training.py"
          "setup_hf_space_auth.py"
          "verify_space_auth.py"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "‚úÖ $file found"
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "‚ùå Missing required files:"
          printf '  - %s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "‚úÖ All required files present"
        
    - name: Validate file contents
      run: |
        echo "üîç Validating file contents..."
        
        # Check if files have content
        for file in app.py requirements.txt space_auth_test.py; do
          if [ ! -s "$file" ]; then
            echo "‚ùå $file is empty"
            exit 1
          fi
          echo "‚úÖ $file has content"
        done
        
        # Validate Python syntax
        echo "üîç Validating Python syntax..."
        python -m py_compile app.py || (echo "‚ùå app.py has syntax errors" && exit 1)
        python -m py_compile space_auth_test.py || (echo "‚ùå space_auth_test.py has syntax errors" && exit 1)
        python -m py_compile openllm_training_with_auth.py || (echo "‚ùå openllm_training_with_auth.py has syntax errors" && exit 1)
        
        echo "‚úÖ All Python files have valid syntax"

  deploy-to-space:
    name: üöÄ Deploy to Space
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Pin exact version for reproducible builds
        pip install huggingface_hub==0.19.0
        
    - name: Deploy to Hugging Face Space
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        SPACE_ID: ${{ secrets.SPACE_ID }}
      run: |
        echo "üöÄ Starting deployment to Hugging Face Space..."
        echo "üìÅ Space ID: $SPACE_ID"
        echo "üîë Token configured: $([ -n "$HF_TOKEN" ] && echo "Yes" || echo "No")"
        
        # Validate environment variables
        if [ -z "$HF_TOKEN" ]; then
          echo "‚ùå HF_TOKEN is not set"
          exit 1
        fi
        
        if [ -z "$SPACE_ID" ]; then
          echo "‚ùå SPACE_ID is not set"
          exit 1
        fi
        
        # Create deployment log
        deployment_log="deployment_$(date +%Y%m%d_%H%M%S).log"
        echo "üìù Deployment log: $deployment_log"
        
        # Function to deploy file with error handling
        deploy_file() {
          local file_path="$1"
          local commit_message="$2"
          
          echo "üì§ Deploying $file_path..."
          
          if [ ! -f "$file_path" ]; then
            echo "‚ùå File not found: $file_path"
            return 1
          fi
          
          python -c "
        import sys
        from huggingface_hub import HfApi
        
        try:
            api = HfApi()
            api.upload_file(
                path_or_fileobj='$file_path',
                path_in_repo='$file_path',
                repo_id='$SPACE_ID',
                repo_type='space',
                commit_message='$commit_message'
            )
            print('‚úÖ Successfully deployed $file_path')
        except Exception as e:
            print(f'‚ùå Failed to deploy $file_path: {e}')
            sys.exit(1)
        " || {
            echo "‚ùå Deployment failed for $file_path"
            return 1
          }
        }
        
        # Deploy files with error handling
        files_to_deploy=(
          "space_auth_test.py:Add authentication test script"
          "openllm_training_with_auth.py:Add training script with authentication"
          "integrate_auth_into_training.py:Add integration guide"
          "setup_hf_space_auth.py:Add Space authentication setup script"
          "verify_space_auth.py:Add Space verification script"
          "app.py:Add main Space application"
          "requirements.txt:Update Space dependencies"
        )
        
        failed_deployments=()
        
        for file_info in "${files_to_deploy[@]}"; do
          IFS=':' read -r file_path commit_message <<< "$file_info"
          
          if deploy_file "$file_path" "$commit_message"; then
            echo "‚úÖ $file_path deployed successfully"
          else
            failed_deployments+=("$file_path")
            echo "‚ùå $file_path deployment failed"
          fi
        done
        
        # Deploy documentation files
        echo "üìö Deploying documentation..."
        doc_files=(
          "HUGGINGFACE_SPACE_SETUP_GUIDE.md:Add Space setup guide"
          "SPACE_AUTHENTICATION_SUMMARY.md:Add authentication summary"
          "SPACE_READY_SUMMARY.md:Add Space ready summary"
        )
        
        for doc_info in "${doc_files[@]}"; do
          IFS=':' read -r file_path commit_message <<< "$doc_info"
          
          if [ -f "$file_path" ]; then
            if deploy_file "$file_path" "$commit_message"; then
              echo "‚úÖ $file_path deployed successfully"
            else
              failed_deployments+=("$file_path")
              echo "‚ùå $file_path deployment failed"
            fi
          else
            echo "‚ö†Ô∏è $file_path not found, skipping"
          fi
        done
        
        # Check deployment results
        if [ ${#failed_deployments[@]} -eq 0 ]; then
          echo "üéâ All files deployed successfully!"
        else
          echo "‚ö†Ô∏è Some deployments failed:"
          printf '  - %s\n' "${failed_deployments[@]}"
          echo "Continuing with verification..."
        fi
        
    - name: Verify deployment
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        SPACE_ID: ${{ secrets.SPACE_ID }}
      run: |
        echo "üîç Verifying deployment..."
        
        python -c "
        import sys
        from huggingface_hub import HfApi
        
        try:
            api = HfApi()
            
            # List files in the Space
            files = api.list_repo_files(repo_id='$SPACE_ID', repo_type='space')
            
            print('üìÅ Files in Space:')
            deployed_files = []
            
            for file in files:
                if file.endswith('.py') or file.endswith('.md') or file.endswith('.txt'):
                    print(f'  ‚úÖ {file}')
                    deployed_files.append(file)
            
            # Check for critical files
            critical_files = ['app.py', 'requirements.txt', 'space_auth_test.py']
            missing_critical = []
            
            for critical_file in critical_files:
                if critical_file not in deployed_files:
                    missing_critical.append(critical_file)
            
            if missing_critical:
                print(f'‚ùå Missing critical files: {missing_critical}')
                sys.exit(1)
            else:
                print('‚úÖ All critical files deployed')
            
            # Count documentation files
            doc_files = [f for f in deployed_files if f.endswith('.md')]
            
            print(f'\\nüìä Deployment Summary:')
            print(f'  - Total files deployed: {len(deployed_files)}')
            print(f'  - Critical files: {len(critical_files)}')
            print(f'  - Documentation files: {len(doc_files)}')
            
            print('\\nüéâ Deployment verification completed successfully!')
            
        except Exception as e:
            print(f'‚ùå Verification failed: {e}')
            sys.exit(1)
        "
        
    - name: Rollback on failure
      if: failure()
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        SPACE_ID: ${{ secrets.SPACE_ID }}
      run: |
        echo "üîÑ Deployment failed, initiating rollback..."
        
        # Note: Full rollback would require more complex logic
        # For now, we'll just log the failure
        echo "‚ö†Ô∏è Manual intervention may be required for rollback"
        echo "üìã Failed deployment details:"
        echo "  - Space ID: $SPACE_ID"
        echo "  - Timestamp: $(date)"
        echo "  - Check Space for partial deployment"
        
        # Could implement actual rollback here if needed
        # python -c "
        # from huggingface_hub import HfApi
        # api = HfApi()
        # # Delete specific files or revert to previous commit
        # "
        
    - name: Deployment summary
      if: always()
      run: |
        echo "üìã Deployment Summary"
        echo "===================="
        echo "Status: ${{ job.status }}"
        echo "Space: ${{ secrets.SPACE_ID }}"
        echo "Timestamp: $(date)"
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment completed successfully"
          echo "üîó Space URL: https://huggingface.co/spaces/${{ secrets.SPACE_ID }}"
        else
          echo "‚ùå Deployment failed"
          echo "üîç Check logs above for details"
        fi
